MSMessagesAppViewController.extend({
    viewDidLoad: function() {
        this.super.viewDidLoad();

        let button = UIButton.buttonWithType(UIButtonTypeSystem);
        button.setTitleForState("Click here!", UIControlStateNormal);
        button.frame = CGRectMake(0, 0, 160.0, 40.0);
        button.addTargetActionForControlEvents(this, "tap", UIControlEvents.UIControlEventTouchUpInside)

        this.view.addSubview(button);
    },
    tap() {
        let layout = MSMessageTemplateLayout.alloc().init();
        layout.caption = "NativeScript rocks !";

        // create a message and tell it the content and layout
        let message = MSMessage.alloc().init();
        message.layout = layout;

        this.activeConversation.insertMessageCompletionHandler(message, null);
    },
    didBecomeActiveWithConversation(conversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
    },
    didReceiveMessageConversation(message, conversatio) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.

        // Use this method to trigger UI updates in response to the message.
    },
    didStartSendingMessageConversation(message, conversation) {
        // Called when the user taps the send button.
    }
}, {

    name: "MessagesMainController",
    exposedMethods: {
        "tap": {
            returns: interop.types.void
        }
    }
});
